const tools = require('./011.js');
TEST_INPUT = [
    '5483143223',
    '2745854711',
    '5264556173',
    '6141336146',
    '6357385478',
    '4167524645',
    '2176841721',
    '6882881134',
    '4846848554',
    '5283751526',
];

EXPECTED_EVOLUTION = new Map([
    [  0, '5483143223274585471152645561736141336146635738547841675246452176841721688288113448468485545283751526'],
    [  1, '6594254334385696582263756672847252447257746849658952786357563287952832799399224559579596656394862637'],
    [  2, '8807476555508908705485978896088485769600870090880066000889896800005943000000745690000008768700006848'],
    [  3, '0050900866850080057599000000399700000041993508006377123000007911250009221113000004211250000021119000'],
    [  4, '2263031977092303169700322211500041111163007619117400534111220042361120553224112215322472111132230211'],
    [  5, '4484144000204414400022533334931152333274118730328511646332331153472231664335223326433583222243341322'],
    [  6, '5595255111315525522233644446052263444496229841439622757443442264583342775446334437544694333354452433'],
    [  7, '6707366222437736633344755558273496655709350062560935099555663486694453886558555548655806444465574644'],
    [  8, '7818477333548847744456976669494608766830473494673047400976886900007564000000966680000047556800007755'],
    [  9, '9060000644780000097669000000805840000082585800009369624000008021250009222113000991111280977911119976'],
    [ 10, '0481112976003111200900411125040081111406009911130600935112330442361130553225235005322506000032240000'],
    [ 20, '3936556452568655680644965556904448655580445686557056800865777000009896000000034460000003644600009543'],
    [ 30, '0643334118425333461133743334582225333337222933333822767333332754574565554445851194444471117944446119'],
    [ 40, '6211111981042111111900421111150003111115000311111600656111110532351111332223459722222229762222222762'],
    [ 50, '9655556447486555680544865556904458655580457486557057000865666000009887800000053368000006335680000538'],
    [ 60, '2533334200274333464022643334582225333337222533333822878333333854573455185445861111754471111115446111'],
    [ 70, '8211111164042111116600421111140004211115000021111600656111110532351111732223511757222234754572222754'],
    [ 80, '1755555697596555560944865556804458655580457086557057000865667000008666000000099000000008000000000000'],
    [ 90, '7433333522264333352222643334582226433337222243333822878333332854573333485445833333877793333333333333'],
    [100, '0397666866074976691800539769330004297822000422989200532228770532222966932222896679222868666789998766'],
]);

EXPECTED_FLASHES = new Map([
    [ 10, 204],
    [100, 1656],
]);

test('test parser', () => {
    var cave = new tools.Cave();
    for (line of TEST_INPUT) {
        cave.parse(line);
    }
    expect(cave.toString()).toBe(EXPECTED_EVOLUTION.get(0));
});

test('test from/toString', () => {
    var cave = new tools.Cave();
    cave.fromString(EXPECTED_EVOLUTION.get(0));
    var out = cave.toString();
    expect(out).toBe(EXPECTED_EVOLUTION.get(0));
});

test('test evolution', () => {
    var cave = new tools.Cave();
    cave.fromString(EXPECTED_EVOLUTION.get(0));
    var t = 0;
    for (probe of EXPECTED_EVOLUTION.keys()) {
        while (t < probe) {
            cave.tick();
            t += 1;
        }
        expect(cave.toString()).toBe(EXPECTED_EVOLUTION.get(probe));
    }
});

test('test flash counter', () => {
    var cave = new tools.Cave();
    cave.fromString(EXPECTED_EVOLUTION.get(0));
    var t = 0;
    for (probe of EXPECTED_FLASHES.keys()) {
        while (t < probe) {
            cave.tick();
            t += 1;
        }
        expect(cave.numFlashes).toBe(EXPECTED_FLASHES.get(probe));
    }
});

test('test synchrony', () => {
    var cave = new tools.Cave();
    cave.fromString(EXPECTED_EVOLUTION.get(0));
    for (let t = 0; t < 1000; t++) {
        cave.tick();
    }
    expect(cave.synchrony).toBe(195);
});
